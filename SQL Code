-- Select all records from the OnlineRetail table
SELECT *
FROM dbo.OnlineRetail;

-- Update stockcode: set to 0 where it is NULL
UPDATE OnlineRetail
SET stockcode = CASE WHEN stockcode IS NULL THEN 0 ELSE stockcode END;

-- Calculate TotalCost for each record
SELECT UnitPrice * Quantity AS TotalCost
FROM OnlineRetail;

-- Add a new column 'totalcost' to the OnlineRetail table
ALTER TABLE OnlineRetail
ADD totalcost FLOAT;

-- Update 'totalcost' with the calculated values
UPDATE OnlineRetail
SET totalcost = UnitPrice * Quantity;

-- Add a new column 'refunditem' to the OnlineRetail table
ALTER TABLE OnlineRetail
ADD refunditem INT;

-- Update 'refunditem' for records where quantity is negative
UPDATE OnlineRetail
SET refunditem = Quantity
WHERE Quantity < 0;

-- Create a new table 'Refund' to store refund transactions
CREATE TABLE Refund (
    InvoiceRefundNo FLOAT,
    ItemNo FLOAT,
    description NVARCHAR(255),
    quantity INT,
    DateRefund DATETIME,
    unitprice FLOAT,
    customerID DECIMAL,
    Total FLOAT
);

-- Select refund transactions from OnlineRetail
SELECT invoiceno, stockcode, description, quantity, invoicedate, unitprice, customerid, totalcost
FROM OnlineRetail
WHERE quantity < 0;

-- Insert refund transactions into the Refund table
INSERT INTO Refund (InvoiceRefundNo, ItemNo, description, quantity, DateRefund, unitprice, customerID, Total)
SELECT invoiceno, stockcode, description, quantity, invoicedate, unitprice, customerid, totalcost
FROM OnlineRetail
WHERE quantity < 0;

-- Adjust 'Total' and 'quantity' in the Refund table to positive values
UPDATE Refund
SET Total = Total * -1;

UPDATE Refund
SET quantity = quantity * -1;

-- Convert 'InvoiceDate' to VARCHAR format in OnlineRetail
UPDATE OnlineRetail
SET InvoiceDate = CONVERT(VARCHAR, InvoiceDate);

-- Delete refund transactions from OnlineRetail
DELETE FROM OnlineRetail
WHERE quantity < 0;

-- Delete records with zero 'Total' from Refund
DELETE FROM Refund
WHERE Total = 0;

-- Select refunds with descriptions starting with 'white hanging heart'
SELECT *
FROM Refund
WHERE description LIKE 'white hanging heart%';

-- Create a view for the top 10 items by total revenue
CREATE VIEW Top10Item AS
SELECT TOP 10 *
FROM OnlineRetail
ORDER BY totalrevenue DESC;

-- Delete specific records from OnlineRetail
DELETE FROM OnlineRetail
WHERE description LIKE 'amazon fee';

-- Delete unwanted records from Refund
DELETE FROM Refund
WHERE description LIKE 'amazon fee'
   OR description LIKE 'Discount'
   OR description LIKE 'Manual'
   OR description LIKE 'bank cha%'
   OR description LIKE 'sam%'
   OR description LIKE 'pos%';

-- Create a view for the top 10 refunds
CREATE VIEW Top10Refund AS
SELECT TOP 10 *
FROM Refund
ORDER BY Total DESC;

-- Create a view for total revenue
CREATE VIEW Revenue AS
SELECT SUM(totalrevenue) AS Revenue
FROM OnlineRetail;

-- Create a view for total refunds
CREATE VIEW TotalRefund AS
SELECT SUM(Total) AS TotalRefund
FROM Refund;

-- Create a view to calculate profit
CREATE VIEW Profit AS
SELECT
    (SELECT SUM(totalrevenue) FROM OnlineRetail) - (SELECT SUM(Total) FROM Refund) AS Profit;

-- Delete records with NULL descriptions from OnlineRetail
DELETE FROM OnlineRetail
WHERE description IS NULL;

-- Switch to the 'Portfolio' database
USE Portfolio;

-- Select distinct customer IDs from Refund
SELECT DISTINCT customerID
FROM Refund;
